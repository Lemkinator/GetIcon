name: Build and publish release

on:
  push:
    branches:
      - main
    paths:
      - 'app/build.gradle.kts'

jobs:
  build-and-publish-release:
    env:
      GH_USERNAME: ${{ secrets.GH_USERNAME }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
      RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Check if versionCode changed and extract versionName
        id: version_info
        run: |
          PREV_COMMIT=$(git rev-parse HEAD^)
          OLD_LINE=$(git show $PREV_COMMIT:app/build.gradle.kts | grep 'versionCode')
          NEW_LINE=$(grep 'versionCode' app/build.gradle.kts)
          echo "Old: $OLD_LINE"
          echo "New: $NEW_LINE"
          if [ "$OLD_LINE" != "$NEW_LINE" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Extract version name
          VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | sed -E 's/.*versionName\s*=\s*"([^"]+)".*/\1/')
          echo "Version name: $VERSION_NAME"
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Grant execute permission for gradlew
        if: steps.version_info.outputs.changed == 'true'
        run: chmod +x ./gradlew

      - name: Set up Keystore for Gradle release build
        if: steps.version_info.outputs.changed == 'true'
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode > keystore.jks

      - name: Assemble Release and copy outputs to app release folder
        if: steps.version_info.outputs.changed == 'true'
        run: ./gradlew :app:assembleRelease && mkdir -p app/release && cp -v -r app/build/outputs/apk/release app

      - name: Commit generated artifacts
        if: steps.version_info.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add app/release/*
          git commit -m "Update APK to v${{ steps.version_info.outputs.version_name }}" || echo "No changes to commit"
          git push

      - name: Create GitHub Release
        if: steps.version_info.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        with:
          tag_name: v${{ steps.version_info.outputs.version_name }}
          release_name: Release v${{ steps.version_info.outputs.version_name }}
          draft: false
          prerelease: false

      - name: Upload Release APK
        if: steps.version_info.outputs.changed == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: GetIcon_v${{ steps.version_info.outputs.version_name }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Bundle release
        if: steps.version_info.outputs.changed == 'true'
        run: ./gradlew bundleRelease

      - name: Publish to Play Store
        if: steps.version_info.outputs.changed == 'true'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: internal
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          debugSymbols: app/build/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib
